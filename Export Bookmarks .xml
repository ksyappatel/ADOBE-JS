<?xml version="1.0" encoding="UTF-8"?>
<Commands>
	<Command name="JavaScript" pauseBefore="false" promptUser="false" label="Export Bookmarks " tooltip="Export Bookmarks " ID="9fa45eca8df44e5bbfdf157062f73fc2">
		<Items>
			<Item name="ScriptCode" type="text" value="// Function to recursively collect all bookmarks&#xD;&#xA;function collectBookmarks(bookmark, level) {&#xD;&#xA;    var bookmarkData = [];&#xD;&#xA;    &#xD;&#xA;    if (!bookmark) return bookmarkData;&#xD;&#xA;    &#xD;&#xA;    // Process current bookmark level&#xD;&#xA;    for (var i = 0; i &lt; bookmark.children.length; i++) {&#xD;&#xA;        var child = bookmark.children[i];&#xD;&#xA;        &#xD;&#xA;        // Create bookmark entry with hierarchy indication&#xD;&#xA;        var indent = &quot;&quot;;&#xD;&#xA;        for (var j = 0; j &lt; level; j++) {&#xD;&#xA;            indent += &quot;  &quot;; // Two spaces per level for indentation&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        var bookmarkInfo = {&#xD;&#xA;            name: child.name,&#xD;&#xA;            level: level,&#xD;&#xA;            indentedName: indent + child.name,&#xD;&#xA;            page: getBookmarkPage(child)&#xD;&#xA;        };&#xD;&#xA;        &#xD;&#xA;        bookmarkData.push(bookmarkInfo);&#xD;&#xA;        &#xD;&#xA;        // Recursively collect child bookmarks&#xD;&#xA;        if (child.children &amp;&amp; child.children.length &gt; 0) {&#xD;&#xA;            var childBookmarks = collectBookmarks(child, level + 1);&#xD;&#xA;            bookmarkData = bookmarkData.concat(childBookmarks);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    return bookmarkData;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Function to get the page number for a bookmark&#xD;&#xA;function getBookmarkPage(bookmark) {&#xD;&#xA;    try {&#xD;&#xA;        if (bookmark.execute) {&#xD;&#xA;            // This is a simplified approach - actual page detection can be complex&#xD;&#xA;            return &quot;N/A&quot;; // You might need to implement more sophisticated page detection&#xD;&#xA;        }&#xD;&#xA;        return &quot;N/A&quot;;&#xD;&#xA;    } catch (e) {&#xD;&#xA;        return &quot;Error&quot;;&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Main export function&#xD;&#xA;function exportBookmarks() {&#xD;&#xA;    try {&#xD;&#xA;        // Get the document&apos;s bookmark root&#xD;&#xA;        var bm = this.bookmarkRoot;&#xD;&#xA;        &#xD;&#xA;        if (!bm || !bm.children || bm.children.length === 0) {&#xD;&#xA;            app.alert(&quot;No bookmarks found in this document.&quot;);&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        // Collect all bookmarks&#xD;&#xA;        var allBookmarks = collectBookmarks(bm, 0);&#xD;&#xA;        &#xD;&#xA;        if (allBookmarks.length === 0) {&#xD;&#xA;            app.alert(&quot;No bookmarks to export.&quot;);&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        // Create CSV content&#xD;&#xA;        var csvContent = &quot;Level,Bookmark Name,Indented Name,Page\n&quot;;&#xD;&#xA;        &#xD;&#xA;        for (var i = 0; i &lt; allBookmarks.length; i++) {&#xD;&#xA;            var bookmark = allBookmarks[i];&#xD;&#xA;            // Escape commas and quotes in bookmark names&#xD;&#xA;            var escapedName = &apos;&quot;&apos; + bookmark.name.replace(/&quot;/g, &apos;&quot;&quot;&apos;) + &apos;&quot;&apos;;&#xD;&#xA;            var escapedIndentedName = &apos;&quot;&apos; + bookmark.indentedName.replace(/&quot;/g, &apos;&quot;&quot;&apos;) + &apos;&quot;&apos;;&#xD;&#xA;            &#xD;&#xA;            csvContent += bookmark.level + &quot;,&quot; + &#xD;&#xA;                         escapedName + &quot;,&quot; + &#xD;&#xA;                         escapedIndentedName + &quot;,&quot; + &#xD;&#xA;                         bookmark.page + &quot;\n&quot;;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        // Create and export the data object&#xD;&#xA;        var fileName = &quot;bookmarks_export.csv&quot;;&#xD;&#xA;        this.createDataObject({&#xD;&#xA;            cName: fileName,&#xD;&#xA;            cValue: csvContent&#xD;&#xA;        });&#xD;&#xA;        &#xD;&#xA;        // Export the file&#xD;&#xA;        this.exportDataObject({&#xD;&#xA;            cName: fileName,&#xD;&#xA;            nLaunch: 2&#xD;&#xA;        });&#xD;&#xA;        &#xD;&#xA;        app.alert(&quot;Bookmarks exported successfully to &quot; + fileName);&#xD;&#xA;        &#xD;&#xA;    } catch (error) {&#xD;&#xA;        app.alert(&quot;Error exporting bookmarks: &quot; + error.message);&#xD;&#xA;        console.println(&quot;Bookmark export error: &quot; + error.toString());&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Alternative simpler version (your corrected original approach)&#xD;&#xA;function exportBookmarksSimple() {&#xD;&#xA;    try {&#xD;&#xA;        var bm = this.bookmarkRoot;&#xD;&#xA;        &#xD;&#xA;        if (!bm || !bm.children) {&#xD;&#xA;            app.alert(&quot;No bookmarks found.&quot;);&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        var ibmLength = bm.children.length;&#xD;&#xA;        var fieldValues = [];&#xD;&#xA;        &#xD;&#xA;        // Add CSV header&#xD;&#xA;        fieldValues.push(&quot;Bookmark Name&quot;);&#xD;&#xA;        &#xD;&#xA;        for (var i = 0; i &lt; ibmLength; i++) {&#xD;&#xA;            var bookname = bm.children[i].name; // Fixed: added [i] index&#xD;&#xA;            fieldValues.push(bookname);&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        // Create CSV content with proper line breaks&#xD;&#xA;        var csvContent = fieldValues.join(&quot;\n&quot;);&#xD;&#xA;        &#xD;&#xA;        this.createDataObject({&#xD;&#xA;            cName: &apos;bookmarks_simple.csv&apos;,&#xD;&#xA;            cValue: csvContent&#xD;&#xA;        });&#xD;&#xA;        &#xD;&#xA;        this.exportDataObject({&#xD;&#xA;            cName: &apos;bookmarks_simple.csv&apos;,&#xD;&#xA;            nLaunch: 2&#xD;&#xA;        });&#xD;&#xA;        &#xD;&#xA;        app.alert(&quot;Simple bookmark export completed!&quot;);&#xD;&#xA;        &#xD;&#xA;    } catch (error) {&#xD;&#xA;        app.alert(&quot;Error: &quot; + error.message);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Execute the export (choose one of the functions below)&#xD;&#xA;exportBookmarks(); // For comprehensive export with hierarchy&#xD;&#xA;// exportBookmarksSimple(); // For simple flat export"/>
		</Items>
	</Command>
</Commands>
