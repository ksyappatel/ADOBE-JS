<?xml version="1.0" encoding="UTF-8"?>
<Commands>
	<Command name="JavaScript" pauseBefore="false" promptUser="false" label="Validate PDF Before Save" tooltip="Validate PDF Before Save (In-Active Bookmarks, Todays Date, Closing Bookmarks)" ID="a948a822d0d47e2a9013fb75d221f1">
		<Items>
			<Item name="ScriptCode" type="text" value="// Function to check for inactive bookmarks and track their paths&#xD;&#xA;function checkBookmarks(bookmarksList, currentPath) {&#xD;&#xA;    var inactiveBookmarks = [];&#xD;&#xA;    var inactiveSubBookmarks = [];&#xD;&#xA;&#xD;&#xA;    for (var i = 0; i &lt; bookmarksList.length; i++) {&#xD;&#xA;        var bookmark = bookmarksList[i];&#xD;&#xA;        var originalPage = this.pageNum; // Store the original page number&#xD;&#xA;        var bookmarkPath = currentPath + &quot; &gt; &quot; + bookmark.name; // Construct the path&#xD;&#xA;&#xD;&#xA;        // Attempt to execute the bookmark&#xD;&#xA;        try {&#xD;&#xA;            bookmark.execute();&#xD;&#xA;            // Check if the page has changed after execution&#xD;&#xA;            if (this.pageNum === originalPage) {&#xD;&#xA;                inactiveBookmarks.push(bookmarkPath); // Add to inactive bookmarks list with path&#xD;&#xA;            }&#xD;&#xA;        } catch (e) {&#xD;&#xA;            // If execution fails, consider the bookmark inactive&#xD;&#xA;            inactiveBookmarks.push(bookmarkPath);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        // Reset to the original page&#xD;&#xA;        this.pageNum = originalPage;&#xD;&#xA;&#xD;&#xA;        // Check for sub-bookmarks recursively&#xD;&#xA;        if (bookmark.children &amp;&amp; bookmark.children.length &gt; 0) {&#xD;&#xA;            var subResult = checkBookmarks(bookmark.children, bookmarkPath);&#xD;&#xA;            inactiveSubBookmarks = inactiveSubBookmarks.concat(subResult.inactiveBookmarks);&#xD;&#xA;            inactiveSubBookmarks = inactiveSubBookmarks.concat(subResult.inactiveSubBookmarks);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    // Return both inactive bookmarks and sub-bookmarks&#xD;&#xA;    return {&#xD;&#xA;        inactiveBookmarks: inactiveBookmarks,&#xD;&#xA;        inactiveSubBookmarks: inactiveSubBookmarks&#xD;&#xA;    };&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Function to close sub-bookmarks in the PDF&#xD;&#xA;function closeSubBookmarks() {&#xD;&#xA;    var root = this.bookmarkRoot;&#xD;&#xA;    if (root) {&#xD;&#xA;        function closeBookmarks(bookmark) {&#xD;&#xA;            if (bookmark.children) {&#xD;&#xA;                for (var i = 0; i &lt; bookmark.children.length; i++) {&#xD;&#xA;                    bookmark.children[i].open = false;&#xD;&#xA;                    closeBookmarks(bookmark.children[i]);&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        closeBookmarks(root);&#xD;&#xA;    } else {&#xD;&#xA;        console.log(&quot;No bookmarks found in the document.&quot;);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Function to search for today&apos;s date in various formats on the first page&#xD;&#xA;function checkTodaysDateOnFirstPage() {&#xD;&#xA;    var today = new Date();&#xD;&#xA;    var month = today.getMonth() + 1;&#xD;&#xA;    var day = today.getDate();&#xD;&#xA;    var year = today.getFullYear();&#xD;&#xA;&#xD;&#xA;    // Pad month and day with leading zeros&#xD;&#xA;    var mm = (month &lt; 10 ? &apos;0&apos; : &apos;&apos;) + month;&#xD;&#xA;    var dd = (day &lt; 10 ? &apos;0&apos; : &apos;&apos;) + day;&#xD;&#xA;&#xD;&#xA;    // Common date formats&#xD;&#xA;    var formats = [&#xD;&#xA;        mm + &apos; &apos; + dd + &apos; &apos; + year,    // MM DD YYYY&#xD;&#xA;        mm + &apos;/&apos; + dd + &apos;/&apos; + year,    // MM/DD/YYYY&#xD;&#xA;        mm + &apos;-&apos; + dd + &apos;-&apos; + year,    // MM-DD-YYYY&#xD;&#xA;        month + &apos; &apos; + day + &apos; &apos; + year, // M D YYYY&#xD;&#xA;        month + &apos;/&apos; + day + &apos;/&apos; + year, // M/D/YYYY&#xD;&#xA;        month + &apos;-&apos; + day + &apos;-&apos; + year  // M-D-YYYY&#xD;&#xA;    ];&#xD;&#xA;&#xD;&#xA;    // Get all text from the first page&#xD;&#xA;    var pageText = &apos;&apos;;&#xD;&#xA;    var numWords = this.getPageNumWords(0);&#xD;&#xA;    for (var i = 0; i &lt; numWords; i++) {&#xD;&#xA;        pageText += this.getPageNthWord(0, i) + &apos; &apos;;&#xD;&#xA;    }&#xD;&#xA;    pageText = pageText.toString();&#xD;&#xA;&#xD;&#xA;    // Check for any of the date formats&#xD;&#xA;    var found = false;&#xD;&#xA;    for (var j = 0; j &lt; formats.length; j++) {&#xD;&#xA;        var regex = new RegExp(&apos;\\b&apos; + formats[j] + &apos;\\b&apos;);&#xD;&#xA;        if (regex.test(pageText)) {&#xD;&#xA;            found = true;&#xD;&#xA;            break;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    if (found) {&#xD;&#xA;        app.alert({&#xD;&#xA;            cMsg: &quot;Today&apos;s date (&quot; + formats.join(&quot; or &quot;) + &quot;) is found on the first page.&quot;,&#xD;&#xA;            cTitle: &quot;Date Found&quot;,&#xD;&#xA;            nIcon: 3,&#xD;&#xA;            nType: 0&#xD;&#xA;        });&#xD;&#xA;    } else {&#xD;&#xA;        app.alert({&#xD;&#xA;            cMsg: &quot;Today&apos;s date (&quot; + formats.join(&quot; or &quot;) + &quot;) is not found on the first page.&quot;,&#xD;&#xA;            cTitle: &quot;Date Not Found&quot;,&#xD;&#xA;            nIcon: 0,&#xD;&#xA;            nType: 0&#xD;&#xA;        });&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Main function to perform error check before saving the file&#xD;&#xA;function errorCheckBeforeSaveFile() {&#xD;&#xA;    // 1. Check for today&apos;s date on the first page&#xD;&#xA;    checkTodaysDateOnFirstPage();&#xD;&#xA;&#xD;&#xA;    // 2. Get the root bookmarks and check for inactive ones&#xD;&#xA;    var myBookmarksList = this.bookmarkRoot.children;&#xD;&#xA;    var result = checkBookmarks(myBookmarksList, &quot;Root&quot;);&#xD;&#xA;&#xD;&#xA;    // 3. Prepare the message for the alert&#xD;&#xA;    var totalInactive = result.inactiveBookmarks.length + result.inactiveSubBookmarks.length;&#xD;&#xA;    var message = &quot;Total Inactive Bookmarks: &quot; + totalInactive + &quot;\n\n&quot;;&#xD;&#xA;&#xD;&#xA;    if (result.inactiveBookmarks.length &gt; 0) {&#xD;&#xA;        message += &quot;Main Inactive Bookmarks:\n&quot; + result.inactiveBookmarks.join(&quot;\n&quot;) + &quot;\n\n&quot;;&#xD;&#xA;    } else {&#xD;&#xA;        message += &quot;No main inactive bookmarks found.\n\n&quot;;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    if (result.inactiveSubBookmarks.length &gt; 0) {&#xD;&#xA;        message += &quot;Sub Inactive Bookmarks:\n&quot; + result.inactiveSubBookmarks.join(&quot;\n&quot;);&#xD;&#xA;    } else {&#xD;&#xA;        message += &quot;No sub inactive bookmarks found.&quot;;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    // 4. Display the alert message&#xD;&#xA;    app.alert(message, 3);&#xD;&#xA;&#xD;&#xA;    // 5. Only close sub-bookmarks if no inactive bookmarks are found&#xD;&#xA;    if (totalInactive === 0) {&#xD;&#xA;        closeSubBookmarks();&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Execute the main function&#xD;&#xA;errorCheckBeforeSaveFile();"/>
		</Items>
	</Command>
</Commands>
