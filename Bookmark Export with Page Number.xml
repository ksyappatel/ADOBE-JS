<?xml version="1.0" encoding="UTF-8"?>
<Commands>
	<Command name="JavaScript" pauseBefore="false" promptUser="false" label="Bookmark Export with Page Number" tooltip=" Bookmark Export with Page Number" ID="b0d8fef342c94b90a16bb853972acb13">
		<Items>
			<Item name="ScriptCode" type="text" value="function getBookmarkPageByExecution(bookmark, doc) {&#xD;&#xA;    var originalPage = doc.pageNum;&#xD;&#xA;    var pageNum = &quot;N/A&quot;;&#xD;&#xA;    try {&#xD;&#xA;        bookmark.execute();&#xD;&#xA;        if (doc.pageNum !== originalPage) {&#xD;&#xA;            pageNum = doc.pageNum + 1; // Acrobat pageNum is zero-based&#xD;&#xA;        }&#xD;&#xA;    } catch (e) {&#xD;&#xA;        pageNum = &quot;Error&quot;;&#xD;&#xA;    }&#xD;&#xA;    doc.pageNum = originalPage; // Reset to original page&#xD;&#xA;    return pageNum;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function collectBookmarksWithExecution(bookmark, level, doc) {&#xD;&#xA;    var bookmarkData = [];&#xD;&#xA;    if (!bookmark) return bookmarkData;&#xD;&#xA;&#xD;&#xA;    for (var i = 0; i &lt; bookmark.children.length; i++) {&#xD;&#xA;        var child = bookmark.children[i];&#xD;&#xA;        var indent = &quot;&quot;;&#xD;&#xA;        for (var j = 0; j &lt; level; j++) indent += &quot;  &quot;;&#xD;&#xA;&#xD;&#xA;        var pageNum = getBookmarkPageByExecution(child, doc);&#xD;&#xA;&#xD;&#xA;        var bookmarkInfo = {&#xD;&#xA;            name: child.name,&#xD;&#xA;            level: level,&#xD;&#xA;            indentedName: indent + child.name,&#xD;&#xA;            page: pageNum&#xD;&#xA;        };&#xD;&#xA;&#xD;&#xA;        bookmarkData.push(bookmarkInfo);&#xD;&#xA;&#xD;&#xA;        if (child.children &amp;&amp; child.children.length &gt; 0) {&#xD;&#xA;            var childBookmarks = collectBookmarksWithExecution(child, level + 1, doc);&#xD;&#xA;            bookmarkData = bookmarkData.concat(childBookmarks);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    return bookmarkData;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function exportBookmarksWithExecutionPages() {&#xD;&#xA;    try {&#xD;&#xA;        var bm = this.bookmarkRoot;&#xD;&#xA;        if (!bm || !bm.children || bm.children.length === 0) {&#xD;&#xA;            app.alert(&quot;No bookmarks found in this document.&quot;);&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        var allBookmarks = collectBookmarksWithExecution(bm, 0, this);&#xD;&#xA;        if (allBookmarks.length === 0) {&#xD;&#xA;            app.alert(&quot;No bookmarks to export.&quot;);&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        var csvContent = &quot;Level,Bookmark Name,Indented Name,Page Number\n&quot;;&#xD;&#xA;        for (var i = 0; i &lt; allBookmarks.length; i++) {&#xD;&#xA;            var bookmark = allBookmarks[i];&#xD;&#xA;            var escapedName = &apos;&quot;&apos; + bookmark.name.replace(/&quot;/g, &apos;&quot;&quot;&apos;) + &apos;&quot;&apos;;&#xD;&#xA;            var escapedIndentedName = &apos;&quot;&apos; + bookmark.indentedName.replace(/&quot;/g, &apos;&quot;&quot;&apos;) + &apos;&quot;&apos;;&#xD;&#xA;            var pageNum = bookmark.page;&#xD;&#xA;&#xD;&#xA;            csvContent += bookmark.level + &quot;,&quot; +&#xD;&#xA;                          escapedName + &quot;,&quot; +&#xD;&#xA;                          escapedIndentedName + &quot;,&quot; +&#xD;&#xA;                          pageNum + &quot;\n&quot;;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        var pdfFileName = this.documentFileName;&#xD;&#xA;        var csvFileName = pdfFileName.replace(/\.pdf$/i, &quot;&quot;) + &quot;_bookmarks.csv&quot;;&#xD;&#xA;&#xD;&#xA;        this.createDataObject({&#xD;&#xA;            cName: csvFileName,&#xD;&#xA;            cValue: csvContent&#xD;&#xA;        });&#xD;&#xA;&#xD;&#xA;        this.exportDataObject({&#xD;&#xA;            cName: csvFileName,&#xD;&#xA;            nLaunch: 2&#xD;&#xA;        });&#xD;&#xA;&#xD;&#xA;        app.alert(&quot;Bookmarks with page numbers exported successfully to &quot; + csvFileName);&#xD;&#xA;&#xD;&#xA;    } catch (error) {&#xD;&#xA;        app.alert(&quot;Error exporting bookmarks: &quot; + error.message);&#xD;&#xA;        console.println(&quot;Bookmark export error: &quot; + error.toString());&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Run the export&#xD;&#xA;exportBookmarksWithExecutionPages();"/>
		</Items>
	</Command>
</Commands>
