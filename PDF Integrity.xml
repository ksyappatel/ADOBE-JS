<?xml version="1.0" encoding="UTF-8"?>
<Commands>
	<Command name="JavaScript" pauseBefore="false" promptUser="false" label="Validate PDF Before Save" tooltip="Validate PDF Before Save (In-Active Bookmarks, Todays Date, Closing Bookmarks)" ID="a948a822d0d47e2a9013fb75d221f1">
		<Items>
			<Item name="ScriptCode" type="text" value="// Utility: Get all text from a page&#xD;&#xA;function getPageText(pageNum) {&#xD;&#xA;    if (pageNum &gt;= this.numPages) return &quot;&quot;;&#xD;&#xA;    var text = [];&#xD;&#xA;    var numWords = this.getPageNumWords(pageNum);&#xD;&#xA;    for (var i = 0; i &lt; numWords; i++) {&#xD;&#xA;        text.push(this.getPageNthWord(pageNum, i));&#xD;&#xA;    }&#xD;&#xA;    return text.join(&quot; &quot;);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Utility: Check if today's date is present in various formats&#xD;&#xA;function containsTodaysDate(text) {&#xD;&#xA;    var today = new Date();&#xD;&#xA;    var month = today.getMonth() + 1;&#xD;&#xA;    var day = today.getDate();&#xD;&#xA;    var year = today.getFullYear();&#xD;&#xA;    var mm = (month &lt; 10 ? '0' : '') + month;&#xD;&#xA;    var dd = (day &lt; 10 ? '0' : '') + day;&#xD;&#xA;    var formats = [&#xD;&#xA;        mm + ' ' + dd + ' ' + year,&#xD;&#xA;        mm + '/' + dd + '/' + year,&#xD;&#xA;        mm + '-' + dd + '-' + year,&#xD;&#xA;        month + ' ' + day + ' ' + year,&#xD;&#xA;        month + '/' + day + '/' + year,&#xD;&#xA;        month + '-' + day + '-' + year&#xD;&#xA;    ];&#xD;&#xA;    for (var i = 0; i &lt; formats.length; i++) {&#xD;&#xA;        var regex = new RegExp('\\b' + formats[i] + '\\b');&#xD;&#xA;        if (regex.test(text)) return true;&#xD;&#xA;    }&#xD;&#xA;    return false;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Check if today's date is only on the first page&#xD;&#xA;function checkTodaysDateOnFirstPageOnly() {&#xD;&#xA;    var foundOnFirst = containsTodaysDate(getPageText.call(this, 0));&#xD;&#xA;    var foundElsewhere = false;&#xD;&#xA;    for (var p = 1; p &lt; 4 &amp;&amp; p &lt; this.numPages; p++) {&#xD;&#xA;        if (containsTodaysDate(getPageText.call(this, p))) {&#xD;&#xA;            foundElsewhere = true;&#xD;&#xA;            break;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    return foundOnFirst &amp;&amp; !foundElsewhere;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Check if a string is present on the first N pages&#xD;&#xA;function checkStringOnPages(searchString, pages) {&#xD;&#xA;    var lowerSearch = searchString.toLowerCase();&#xD;&#xA;    for (var p = 0; p &lt; pages &amp;&amp; p &lt; this.numPages; p++) {&#xD;&#xA;        if (getPageText.call(this, p).toLowerCase().indexOf(lowerSearch) !== -1) {&#xD;&#xA;            return true;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    return false;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Check if the base file name is present on the first page&#xD;&#xA;function checkFileNameOnFirstPage() {&#xD;&#xA;    var fileName = this.documentFileName;&#xD;&#xA;    var baseName = fileName.replace(/\\.[^\\.]+$/, &quot;&quot;);&#xD;&#xA;    var firstPageText = getPageText.call(this, 0);&#xD;&#xA;    return firstPageText.toLowerCase().indexOf(baseName.toLowerCase()) !== -1;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Robust inactive bookmark check: try executing from every page except the current one&#xD;&#xA;function checkBookmarks(bookmarksList, currentPath) {&#xD;&#xA;    var inactiveBookmarks = [];&#xD;&#xA;    var inactiveSubBookmarks = [];&#xD;&#xA;&#xD;&#xA;    for (var i = 0; i &lt; bookmarksList.length; i++) {&#xD;&#xA;        var bookmark = bookmarksList[i];&#xD;&#xA;        var bookmarkPath = currentPath + &quot; &gt; &quot; + bookmark.name;&#xD;&#xA;        var isActive = false;&#xD;&#xA;        var originalPage = this.pageNum;&#xD;&#xA;&#xD;&#xA;        // Only check leaf bookmarks (no children)&#xD;&#xA;        if (!bookmark.children || bookmark.children.length === 0) {&#xD;&#xA;            // Try executing from every page except the current one&#xD;&#xA;            for (var testPage = 0; testPage &lt; this.numPages; testPage++) {&#xD;&#xA;                if (testPage === originalPage) continue;&#xD;&#xA;                this.pageNum = testPage;&#xD;&#xA;                var beforePage = this.pageNum;&#xD;&#xA;                try {&#xD;&#xA;                    bookmark.execute();&#xD;&#xA;                    var afterPage = this.pageNum;&#xD;&#xA;                    if (afterPage !== beforePage) {&#xD;&#xA;                        isActive = true;&#xD;&#xA;                        break;&#xD;&#xA;                    }&#xD;&#xA;                } catch (e) {&#xD;&#xA;                    // If execution throws, treat as inactive&#xD;&#xA;                    isActive = false;&#xD;&#xA;                    break;&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            if (!isActive) {&#xD;&#xA;                inactiveBookmarks.push(bookmarkPath);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        // Reset to the original page&#xD;&#xA;        this.pageNum = originalPage;&#xD;&#xA;&#xD;&#xA;        // Recursively check sub-bookmarks&#xD;&#xA;        if (bookmark.children &amp;&amp; bookmark.children.length &gt; 0) {&#xD;&#xA;            var subResult = checkBookmarks.call(this, bookmark.children, bookmarkPath);&#xD;&#xA;            inactiveSubBookmarks = inactiveSubBookmarks.concat(subResult.inactiveBookmarks);&#xD;&#xA;            inactiveSubBookmarks = inactiveSubBookmarks.concat(subResult.inactiveSubBookmarks);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    return {&#xD;&#xA;        inactiveBookmarks: inactiveBookmarks,&#xD;&#xA;        inactiveSubBookmarks: inactiveSubBookmarks&#xD;&#xA;    };&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Close all sub-bookmarks&#xD;&#xA;function closeSubBookmarks() {&#xD;&#xA;    var root = this.bookmarkRoot;&#xD;&#xA;    if (!root) return;&#xD;&#xA;    function closeBookmarks(bookmark) {&#xD;&#xA;        if (bookmark.children) {&#xD;&#xA;            for (var i = 0; i &lt; bookmark.children.length; i++) {&#xD;&#xA;                bookmark.children[i].open = false;&#xD;&#xA;                closeBookmarks(bookmark.children[i]);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    closeBookmarks(root);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Main function: PDF Bookmark &amp; Content Integrity Checker&#xD;&#xA;function errorCheckBeforeSaveFile() {&#xD;&#xA;    var dateFoundOnlyOnFirst = checkTodaysDateOnFirstPageOnly.call(this);&#xD;&#xA;    var nameFound = checkStringOnPages.call(this, 'Kashyap Patel', 4);&#xD;&#xA;    var fileNameFound = checkFileNameOnFirstPage.call(this);&#xD;&#xA;    var myBookmarksList = this.bookmarkRoot.children;&#xD;&#xA;    var result = checkBookmarks.call(this, myBookmarksList, &quot;Root&quot;);&#xD;&#xA;    var totalInactive = result.inactiveBookmarks.length + result.inactiveSubBookmarks.length;&#xD;&#xA;&#xD;&#xA;    var dateSign = dateFoundOnlyOnFirst ? &quot;[OK]&quot; : &quot;[X]&quot;;&#xD;&#xA;    var nameSign = nameFound ? &quot;[OK]&quot; : &quot;[X]&quot;;&#xD;&#xA;    var fileNameSign = fileNameFound ? &quot;[OK]&quot; : &quot;[X]&quot;;&#xD;&#xA;    var bookmarksSign = totalInactive === 0 ? &quot;[OK]&quot; : &quot;[X]&quot;;&#xD;&#xA;&#xD;&#xA;    var message = &quot;PDF Bookmark &amp; Content Integrity Checker\n&quot;;&#xD;&#xA;    message += &quot;========================================\n&quot;;&#xD;&#xA;    message += dateSign + &quot; Today's date: &quot; + (dateFoundOnlyOnFirst ? &quot;Found on the first page only.&quot; : &quot;Not found on the first page only.&quot;) + &quot;\n&quot;;&#xD;&#xA;    message += nameSign + &quot; 'Kashyap Patel': &quot; + (nameFound ? &quot;Found on the first four pages.&quot; : &quot;Not found on the first four pages.&quot;) + &quot;\n&quot;;&#xD;&#xA;    message += fileNameSign + &quot; File name: &quot; + (fileNameFound ? &quot;File name is mentioned on the first page.&quot; : &quot;File name is NOT mentioned on the first page.&quot;) + &quot;\n&quot;;&#xD;&#xA;    message += bookmarksSign + &quot; Inactive Bookmarks: &quot; + (totalInactive === 0 ? &quot;None&quot; : totalInactive) + &quot;\n&quot;;&#xD;&#xA;    message += &quot;----------------------------------------\n\n&quot;;&#xD;&#xA;&#xD;&#xA;    if (result.inactiveBookmarks.length &gt; 0) {&#xD;&#xA;        message += &quot;Main Inactive Bookmarks:\n&quot; + result.inactiveBookmarks.join(&quot;\n&quot;) + &quot;\n\n&quot;;&#xD;&#xA;    } else {&#xD;&#xA;        message += &quot;No main inactive bookmarks found.\n\n&quot;;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    if (result.inactiveSubBookmarks.length &gt; 0) {&#xD;&#xA;        message += &quot;Sub Inactive Bookmarks:\n&quot; + result.inactiveSubBookmarks.join(&quot;\n&quot;);&#xD;&#xA;    } else {&#xD;&#xA;        message += &quot;No sub inactive bookmarks found.&quot;;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    app.alert({&#xD;&#xA;        cMsg: message,&#xD;&#xA;        cTitle: &quot;PDF Bookmark &amp; Content Integrity Checker&quot;,&#xD;&#xA;        nIcon: (totalInactive === 0 &amp;&amp; dateFoundOnlyOnFirst &amp;&amp; nameFound &amp;&amp; fileNameFound) ? 3 : 0 // 3=info, 0=error&#xD;&#xA;    });&#xD;&#xA;&#xD;&#xA;    if (totalInactive === 0) {&#xD;&#xA;        closeSubBookmarks.call(this);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Run the checker&#xD;&#xA;errorCheckBeforeSaveFile.call(this);"/>
		</Items>
	</Command>
</Commands>